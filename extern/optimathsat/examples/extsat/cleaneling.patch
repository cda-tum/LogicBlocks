diff --git a/cleaneling/cleaneling.h b/cleaneling/cleaneling.h
--- a/cleaneling/cleaneling.h
+++ b/cleaneling/cleaneling.h
@@ -37,6 +37,7 @@
 /*------------------------------------------------------------------------*/
 
 #include <cstdlib>			// need 'size_t'
+#include "mathsat.h"
 
 /*------------------------------------------------------------------------*/
 
@@ -79,6 +80,12 @@
   virtual void statistics () = 0;	// print statistics
   virtual size_t maximum_bytes () = 0;  // maximum allocated bytes
   virtual size_t current_bytes () = 0;  // currently allocated bytes
+
+public:
+  virtual void freeze(int) = 0;     // freezes current var
+  virtual void melt(int) = 0;       // melts current var
+  virtual void external_assign(int) = 0;
+  virtual void set_msat_dpll_callback(msat_dpll_callback cb) = 0;
 };
 
 /*------------------------------------------------------------------------*/
diff --git a/cleaneling/configure.sh b/cleaneling/configure.sh
--- a/cleaneling/configure.sh
+++ b/cleaneling/configure.sh
@@ -29,7 +29,7 @@
 [ $check = undefined ] && check=$debug
 [ $log = undefined ] && log=$debug
 CXX=g++
-CXXFLAGS="-Wall"
+CXXFLAGS="-Wall -I\$(MATHSAT_INCLUDE)"
 LDFLAGS=""
 if [ $debug = yes ]
 then
diff --git a/cleaneling/libcleaneling.cc b/cleaneling/libcleaneling.cc
--- a/cleaneling/libcleaneling.cc
+++ b/cleaneling/libcleaneling.cc
@@ -53,7 +53,8 @@
 #include <iomanip>
 #include <iostream>
 
-#define int64_t long
+//#define int64_t long
+#include <stdint.h>
 
 /*------------------------------------------------------------------------*/
 
@@ -811,6 +812,7 @@
     FREE = 0,			// Not eliminated nor fixed.
     FIXED = 1,			// Fixed to a value on the top-level.
     ELIMINATED = 2,		// Eliminated through variable elimination.
+    FROZEN = 3
   };
 
   State state;			// See above.
@@ -979,6 +981,9 @@
 
 class Solver : public AbstractSolver {
 
+    msat_dpll_callback event;
+    bool has_event;
+
     Mem mem;			// Custom memory manager for memory stats.
 
     int level;			// Decision level (top/root level == 0).
@@ -1040,7 +1045,7 @@
     bool each_variable_occurs_only_once ();	// .. in clause 'addedlits'.
 
     Clause * new_clause (bool redundant, int glue);	// Allocate.
-    void connect_clause (Clause *);			// Connect watches.
+    void connect_clause (Clause *, bool bt = true);	// Connect watches.
 
     // Combines 'new_clause' and 'connect_clause' but also pushes it.
     //
@@ -1182,6 +1187,9 @@
     void addlit (int);
 
     Status solve ();
+    void freeze(int);
+    void melt(int);
+    void external_assign(int var);
     Value value (int);
 
     void option (const char *, int);
@@ -1190,6 +1198,12 @@
     void statistics ();
     size_t maximum_bytes ();
     size_t current_bytes ();
+
+    void set_msat_dpll_callback(msat_dpll_callback cb)
+    {
+        event = cb;
+        has_event = true;
+    }
 };
 
 /*------------------------------------------------------------------------*/
@@ -1296,7 +1310,8 @@
 // will only be performed if you set the 'check' option.
 
 bool Solver::clause_entailed () {
-#ifndef NLGL
+  return true;
+  #ifndef NLGL
   if (!opts.check) return true;
   vector<int>::const_iterator i;
   for (i = addedlits.begin (); i != addedlits.end (); i++)
@@ -1451,6 +1466,8 @@
 //
 void Solver::assign (int lit, Clause * reason) {
   Var & v = var (lit);
+  // Bas --> inform_hook_of_assignment
+  if (has_event) msat_dpll_callback_notify_assignment(event, lit);
   assert (!val (lit));
   int idx = abs (lit);
   Value s = (Value) sign (lit);
@@ -1462,7 +1479,7 @@
     if (v.state == Var::ELIMINATED) {
       assert (stats.vars.eliminated > 0);
       stats.vars.eliminated--;
-    } else assert (v.state == Var::FREE);
+    } else assert (v.state == Var::FREE || Var::FROZEN);
     v.state = Var::FIXED;
   }
   trail.push_back (mem, lit);
@@ -1507,6 +1524,8 @@
 void Solver::backtrack (int new_level) {
   assert (0 <= new_level && new_level <= level);
   if (new_level == level) return;
+  // Bas --> inform hook of backtrack
+  if (has_event) msat_dpll_callback_notify_backtrack(event, new_level);
   LOG ("starting to backtrack to level " << new_level);
   const Frame * f;
   while ((f = &control.back ())->level > new_level) {
@@ -1601,7 +1620,7 @@
 
 /*------------------------------------------------------------------------*/
 
-void Solver::connect_clause (Clause * c) {
+void Solver::connect_clause (Clause * c, bool bt) {
 
   if (c->satisfied) return; // do not connect top level satisfied clauses
 
@@ -1623,10 +1642,10 @@
   int l0 = c->lits[0], l1 = l0 ? c->lits[1] : 0;
 
   // Backtrack to the minimum of the levels of these two first literals.
-  {
+  //{
     int new_level = (l0 && l1) ? min (var (l0).level, var (l1).level) : 0;
-    if (new_level != INT_MAX) backtrack (new_level);
-  }
+    if (new_level != INT_MAX && bt) backtrack (new_level);
+  //}
 
   // Now watch the first two literals if both are non zero, so the clause is
   // at least a binary clause.  See comments to 'Watch' above for details.
@@ -1648,9 +1667,15 @@
     }
     if (!ignore) {
       if (!lit) {
-	assert (!level);
-	LOG ("found empty clause");
-	if (!empty) empty = c;
+	      if (!empty  && !level) {
+	          LOG ("found empty clause");
+	          empty = c; //
+	      } else if (bt) {
+	          //
+	          backtrack(new_level - 1);
+	      } else {
+	          // Theory conflict ..
+	      }
       } else assign (lit, c);	// Assign unit forced by this clause.
     }
   }
@@ -1792,10 +1817,45 @@
     if (conflict) while (i != ws.end ()) *j++ = *i++;
     ws.resize (j);					// Reset size.
   }
+
+  assert( conflict || propagated() );
+
   if (conflict) {
     LOGCLAUSE (conflict, "conflicting");
     if (!simplifier) stats.conflicts++;   // Otherwise counted differently.
+  } else if (has_event && simplifier == NOSIMP) {
+      int *tconflict;
+      msat_truth_value code;
+      int err =
+          msat_dpll_callback_no_conflict_after_bcp(event, &code, &tconflict);
+      assert(!err);
+      if (code == MSAT_TRUE || code == MSAT_UNDEF) {
+          if (!propagated()) {
+              conflict = bcp();
+          }
+      }
+      else if (code == MSAT_FALSE) {
+          //
+          int last_clause_id = clauses.size();
+          assert(addedlits.size() == 0);
+          for (size_t i = 0; tconflict[i]; i++) {
+              assert(val(tconflict[i]) == -1);
+              addedlits.push_back(mem, tconflict[i]);
+          }
+          bool isunit = addedlits.size() == 1;
+          Clause* newc = new_clause(false, 0);
+          addedlits.clear();
+          clauses.push_back (mem, newc);
+          connect_clause(newc, isunit);
+          if (!isunit) {
+              backtrack(var (tconflict[0]).level);
+          }
+          conflict = newc;
+          assert( conflict || propagated() );
+      }
   }
+
+  assert( conflict || propagated() );
   stats.propagations += propagations;
   stats.steps += visits;
   return conflict;
@@ -1960,29 +2020,47 @@
 // reachable in the implication graph from the conflict.
 //
 void Solver::analyze (Clause * reason) {
-  if (empty) { assert (!level); return; }
+  if (empty || !level) { assert (!level); empty = reason; return; }
   start (&stats.time.search.analyze);
   update_glue (reason);
   assert (addedlits.empty ());
   vector<int>::const_iterator it = trail.end ();
+  LOGCLAUSE (reason, "Opening an analysis");
   int lit = 0, open = 0;
   for (;;) {
-    LOGCLAUSE (reason, "analyzing");
-    bump_clause (reason);
-    for (const int * p = reason->lits; (lit = *p); p++)
-      if (pull_lit (lit)) open++;
+    if (reason) {
+        LOGCLAUSE (reason, "analyzing");
+        bump_clause (reason);
+        for (const int * p = reason->lits; (lit = *p); p++) {
+            //assert(val(lit) < 0);
+            if (pull_lit (lit)) { open++; }
+        }
+    } else if (open) {
+        // Bas --> ask_hook_for_reason, since we still have an
+        // open var
+        assert(has_event);
+        assert(lit);
+        int *reason;
+        msat_dpll_callback_ask_theory_reason(event, -lit, &reason);
+        for (int i = 1; reason[i]; i++) {
+            lit = reason[i];
+            assert(lit);
+            //assert(val(lit) < 0);
+            if (pull_lit (lit)) { open++; }
+        }
+    }
     while (it != trail.begin() && !marked (lit = -*--it))
       assert (var (lit).level == level);
     if (it == trail.begin () || !--open) break;
     reason = var (lit).reason;
-    assert (reason);
+    // assert (reason); Bas --> No longer holds when stuff get told from above.
   }
   assert (lit);			// TODO remove this coverage hole
   if (lit) {
     LOG ("adding UIP " << lit);
     addedlits.push_back (mem, lit);
   }
-  minimize_clause ();
+  //minimize_clause ();
   unmark ();			// Flush 'seen' and unmark all literals.
   assert (clause_entailed ());
   int glue = unmark_frames ();
@@ -2213,6 +2291,8 @@
 void Solver::assume (int decision) {
   assert (propagated ());
   level++;
+  // Bas --> new_level
+  if (has_event) msat_dpll_callback_notify_new_level(event);
   int height = (int) trail.size ();
   LOG ("push frame decision " << decision << " trail " << height);
   control.push_back (mem, Frame (decision, level, height));
@@ -3029,13 +3109,46 @@
   int64_t conflicts = 0;
   Clause * conflict;
   Status res = UNKNOWN;
-  while (!res)
+  while (!res) {
     if (empty) res = UNSATISFIABLE;
-    else if ((conflict = bcp ())) analyze (conflict), conflicts++;
+    else if ((conflict = bcp ())) { analyze (conflict), conflicts++; }
     else if (conflicts >= limit) break;
     else if (reducing ()) reduce ();
     else if (restarting ()) restart ();
-    else if (!decide ()) res = SATISFIABLE;
+    else if (!decide ()) {
+        msat_truth_value code = MSAT_TRUE;
+        if (has_event) {
+            int *tconflict;
+            int err = msat_dpll_callback_model_found(event, &code, &tconflict);
+            assert(!err);
+            if (code == MSAT_TRUE) { /* Do nothing */ }
+            else if (code == MSAT_UNDEF) {
+                // Do another round of bcp ..
+            }
+            else if (code == MSAT_FALSE) {
+                //
+                assert(addedlits.size() == 0);
+                for (size_t i =0; tconflict[i]; i++) {
+                    assert(val(tconflict[i]) == -1);
+                    addedlits.push_back(mem, tconflict[i]);
+                }
+                bool isunit = addedlits.size() == 1;
+                Clause* newc = new_clause(false, 0);
+                addedlits.clear();
+                clauses.push_back (mem, newc);
+                connect_clause(newc, isunit);
+                if (!isunit) {
+                    backtrack(var (tconflict[0]).level);
+                }
+                analyze (newc);
+                conflicts++;
+            }
+        }
+        if (code == MSAT_TRUE) {
+            res = SATISFIABLE;
+        }
+    }
+  }
   stop ();
   return (Status) res;
 }
@@ -3100,7 +3213,9 @@
 /**** PART6: implemenetation of public member functions *******************/
 /*------------------------------------------------------------------------*/
 
-Solver::Solver () : 
+Solver::Solver () :
+  event(),
+  has_event(false),
   level (0),			// top-level = root-level = 0
   dense (false),		// start in sparse mode only watching clauses
   simplifier (NOSIMP),		// only non zero within 'simplify'
@@ -3252,6 +3367,25 @@
 
 /*------------------------------------------------------------------------*/
 
+void Solver::melt(int var) {
+    import (var);
+    if (vars[abs(var)].state == Var::FROZEN) {
+        vars[abs(var)].state = Var::FREE;
+    }
+}
+
+void Solver::freeze(int var) {
+    import (var);
+    if (vars[abs(var)].state == Var::FREE) {
+        vars[abs(var)].state = Var::FROZEN;
+    }
+}
+
+void Solver::external_assign(int lit) {
+    LOG ("External " << lit << " propagation");
+    assign(lit);
+}
+
 Value Solver::value (int lit) { import (lit); return val (lit); }
 
 /*------------------------------------------------------------------------*/
