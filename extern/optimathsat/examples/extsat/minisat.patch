diff --git a/minisat-2.2.0/core/Solver.cc b/minisat-2.2.0/core/Solver.cc
--- a/minisat-2.2.0/core/Solver.cc
+++ b/minisat-2.2.0/core/Solver.cc
@@ -25,6 +25,12 @@
 
 using namespace Minisat;
 
+//
+// Some quick functions for SMT
+inline int lit2dimacs(Lit l) { return (var(l) + 1) * (sign(l) ? -1 : 1); }
+inline Lit dimacs2lit(int x) { assert(x); return mkLit(abs(x)-1, x < 0); }
+//
+
 //=================================================================================================
 // Options:
 
@@ -47,12 +53,13 @@
 //=================================================================================================
 // Constructor/Destructor:
 
-
 Solver::Solver() :
 
     // Parameters (user settable):
     //
-    verbosity        (0)
+    has_event(false)
+  , event()
+  , verbosity        (0)
   , var_decay        (opt_var_decay)
   , clause_decay     (opt_clause_decay)
   , random_var_freq  (opt_random_var_freq)
@@ -129,30 +136,63 @@
 }
 
 
-bool Solver::addClause_(vec<Lit>& ps)
+bool Solver::addClause_(vec<Lit>& ps, bool bt)
 {
-    assert(decisionLevel() == 0);
+    //assert(decisionLevel() == 0);
     if (!ok) return false;
 
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
     Lit p; int i, j;
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
-        if (value(ps[i]) == l_True || ps[i] == ~p)
+        if ((value(ps[i]) == l_True && !level(var(ps[i])))
+            || ps[i] == ~p)
             return true;
-        else if (value(ps[i]) != l_False && ps[i] != p)
+        else if ((value(ps[i]) != l_False || (level(var(ps[i])) > 0) || !bt)
+            && ps[i] != p)
             ps[j++] = p = ps[i];
     ps.shrink(i - j);
 
+    // Make sure clauses is sorted so that
+    sort(ps, LitOrderLt(this));
+
     if (ps.size() == 0)
         return ok = false;
-    else if (ps.size() == 1){
+    else if (ps.size() == 1) {
+        cancelUntil(0);
         uncheckedEnqueue(ps[0]);
         return ok = (propagate() == CRef_Undef);
-    }else{
+    } else {
         CRef cr = ca.alloc(ps, false);
         clauses.push(cr);
         attachClause(cr);
+        if (value(ps[1]) == l_False) {
+            //assert(value(ps[0]) != l_True);
+            if (value(ps[0]) == l_True) {
+                if (level(var(ps[0])) > level(var(ps[1]))) {
+                    // Clause should have been unit at level level(var(ps[1]))
+                    assert(bt);
+                    cancelUntil(level(var(ps[1])));
+                    uncheckedEnqueue(ps[0], cr);
+                }
+            } else if (value(ps[0]) == l_Undef) {
+                // Clause is unit under current assignment
+                cancelUntil(level(var(ps[1])));
+                uncheckedEnqueue(ps[0], cr);
+            } else {
+                if (level(var(ps[0])) == level(var(ps[1]))) {
+                    // Clause is binary under assignment upto level(var(ps[1]) -1)
+                    if (level(var(ps[0])) == 0) { return false; }
+                    if (bt) { cancelUntil(level(var(ps[0])) - 1); }
+                } else {
+                    // Clause is unit under assignment upto level(var(ps[1]))
+                    if (bt) {
+                        cancelUntil(level(var(ps[1])));
+                        uncheckedEnqueue(ps[0], cr);
+                    }
+                }
+            }
+        }
     }
 
     return true;
@@ -206,6 +246,7 @@
 //
 void Solver::cancelUntil(int level) {
     if (decisionLevel() > level){
+        if (has_event) msat_dpll_callback_notify_backtrack(event, level);
         for (int c = trail.size()-1; c >= trail_lim[level]; c--){
             Var      x  = var(trail[c]);
             assigns [x] = l_Undef;
@@ -272,22 +313,52 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
-        Clause& c = ca[confl];
+        // No longer holds when SMT solver can give explanations
+        // assert(confl != CRef_Undef); // (otherwise should be UIP)
+        if (confl != CRef_Undef) {
+            Clause& c = ca[confl];
 
-        if (c.learnt())
-            claBumpActivity(c);
+            if (c.learnt())
+                claBumpActivity(c);
 
-        for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
-            Lit q = c[j];
+            for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++) {
+                Lit q = c[j];
 
-            if (!seen[var(q)] && level(var(q)) > 0){
-                varBumpActivity(var(q));
-                seen[var(q)] = 1;
-                if (level(var(q)) >= decisionLevel())
-                    pathC++;
-                else
-                    out_learnt.push(q);
+                if (!seen[var(q)] && level(var(q)) > 0){
+                    varBumpActivity(var(q));
+                    seen[var(q)] = 1;
+                    assert(value(q) == l_False);
+                    if (level(var(q)) >= decisionLevel()) {
+                        pathC++;
+                    } else {
+                        out_learnt.push(q);
+                    }
+                }
+            }
+        } else {
+            assert(has_event);
+            int *reason;
+            msat_dpll_callback_ask_theory_reason(event, lit2dimacs(p),
+                                                 &reason);
+            // std::vector<int> reason;
+            // event->ask_hook_for_theory_reason(lit2dimacs(p), reason);
+            // assert(reason.size() > 2 && reason.back() == 0);
+            // for (size_t i = 1; i < reason.size() - 1; i++) {
+            ++reason;
+            while (*reason) {
+                //Lit q = dimacs2lit(reason[i]);
+                Lit q = dimacs2lit(*reason);
+                ++reason;
+                if (!seen[var(q)] && level(var(q)) > 0){
+                    varBumpActivity(var(q));
+                    seen[var(q)] = 1;
+                    assert(value(q) == l_False);
+                    if (level(var(q)) >= decisionLevel()) {
+                        pathC++;
+                    } else {
+                        out_learnt.push(q);
+                    }
+                }
             }
         }
         
@@ -429,6 +500,7 @@
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
     assert(value(p) == l_Undef);
+    if (has_event) { msat_dpll_callback_notify_assignment(event, lit2dimacs(p)); }
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -503,7 +575,29 @@
     }
     propagations += num_props;
     simpDB_props -= num_props;
-
+    if (confl == CRef_Undef && has_event) {
+        int *tconflict;
+        msat_truth_value code;
+        int err =
+            msat_dpll_callback_no_conflict_after_bcp(event, &code, &tconflict);
+        assert(!err);
+        if ((code == MSAT_TRUE || code == MSAT_UNDEF)) {
+            if (qhead < trail.size()) { confl = propagate(); }
+        } else {
+            assert(code == MSAT_FALSE);
+            vec<Lit> tconflict_;
+            for (size_t i = 0; tconflict[i]; ++i) {
+                Lit l = dimacs2lit(tconflict[i]);
+                assert(value(l) == l_False);
+                tconflict_.push(l);
+            }
+            cancelUntil(level(var(tconflict_[0])));
+            int s = clauses.size();
+            addClause_(tconflict_, false);
+            confl = clauses.last();
+            assert(s + 1 == clauses.size());
+        }
+    }
     return confl;
 }
 
@@ -619,8 +713,32 @@
     vec<Lit>    learnt_clause;
     starts++;
 
+    bool model_found = false;
     for (;;){
-        CRef confl = propagate();
+        CRef confl = CRef_Undef;
+        if (model_found) {
+            assert(has_event);
+            int *tconflict;
+            msat_truth_value code;
+            int err = msat_dpll_callback_model_found(event, &code, &tconflict);
+            assert(!err);
+            if (code == MSAT_TRUE) { return l_True; }
+            else if (code == MSAT_FALSE) {
+                vec<Lit> tconflict_;
+                for (size_t i = 0; tconflict[i]; ++i) {
+                    Lit l = dimacs2lit(tconflict[i]);
+                    assert(value(l) == l_False);
+                    tconflict_.push(l);
+                }
+                cancelUntil(level(var(tconflict_[0])));
+                int s = clauses.size();
+                addClause_(tconflict_, false);
+                assert(s+1 == clauses.size());
+                confl = clauses.last();
+            } else { assert(code == MSAT_UNDEF); }
+            model_found = false;
+        }
+        if (confl == CRef_Undef) { confl = propagate(); }
         if (confl != CRef_Undef){
             // CONFLICT
             conflicts++; conflictC++;
@@ -692,9 +810,14 @@
                 decisions++;
                 next = pickBranchLit();
 
-                if (next == lit_Undef)
+                if (next == lit_Undef) {
                     // Model found:
+                    if (has_event) {
+                        model_found = true;
+                        continue;
+                    }
                     return l_True;
+                }
             }
 
             // Increase decision level and enqueue 'next'
@@ -755,12 +878,12 @@
     if (!ok) return l_False;
 
     solves++;
-
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
+    verbosity =1;
     if (verbosity >= 1){
         printf("============================[ Search Statistics ]==============================\n");
         printf("| Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
diff --git a/minisat-2.2.0/core/Solver.h b/minisat-2.2.0/core/Solver.h
--- a/minisat-2.2.0/core/Solver.h
+++ b/minisat-2.2.0/core/Solver.h
@@ -26,6 +26,7 @@
 #include "mtl/Alg.h"
 #include "utils/Options.h"
 #include "core/SolverTypes.h"
+#include "mathsat.h"
 
 
 namespace Minisat {
@@ -40,6 +41,8 @@
     //
     Solver();
     virtual ~Solver();
+    bool has_event;
+    msat_dpll_callback event;
 
     // Problem specification:
     //
@@ -50,7 +53,7 @@
     bool    addClause (Lit p);                                  // Add a unit clause to the solver. 
     bool    addClause (Lit p, Lit q);                           // Add a binary clause to the solver. 
     bool    addClause (Lit p, Lit q, Lit r);                    // Add a ternary clause to the solver. 
-    bool    addClause_(      vec<Lit>& ps);                     // Add a clause to the solver without making superflous internal copy. Will
+    bool    addClause_(vec<Lit>& ps, bool bt = true);           // Add a clause to the solver without making superflous internal copy. Will
                                                                 // change the passed vector 'ps'.
 
     // Solving:
@@ -166,6 +169,23 @@
         VarOrderLt(const vec<double>&  act) : activity(act) { }
     };
 
+    struct LitOrderLt {
+        const Solver& solver;
+        int lbool2int (lbool v) const {
+            if (v == l_True) return 0;
+            if (v == l_Undef) return 1;
+            assert(v == l_False);
+            return 2;
+        }
+        bool operator () (Lit x, Lit y) const {
+            if (lbool2int(solver.value(x)) == lbool2int(solver.value(y))) {
+                return solver.level(var(x)) > solver.level(var(y));
+            }
+            return lbool2int(solver.value(x)) < lbool2int(solver.value(y));
+        }
+        LitOrderLt(const Solver* s) : solver(*s) { }
+    };
+
     // Solver state:
     //
     bool                ok;               // If FALSE, the constraints are already unsatisfiable. No part of the solver state may be used!
@@ -215,7 +235,9 @@
     void     insertVarOrder   (Var x);                                                 // Insert a variable in the decision order priority queue.
     Lit      pickBranchLit    ();                                                      // Return the next decision variable.
     void     newDecisionLevel ();                                                      // Begins a new decision level.
+public:
     void     uncheckedEnqueue (Lit p, CRef from = CRef_Undef);                         // Enqueue a literal. Assumes value of literal is undefined.
+protected:
     bool     enqueue          (Lit p, CRef from = CRef_Undef);                         // Test if fact 'p' contradicts current state, enqueue otherwise.
     CRef     propagate        ();                                                      // Perform unit propagation. Returns possibly conflicting clause.
     void     cancelUntil      (int level);                                             // Backtrack until a certain level.
@@ -314,7 +336,7 @@
 inline bool     Solver::addClause       (Lit p, Lit q)          { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); return addClause_(add_tmp); }
 inline bool     Solver::addClause       (Lit p, Lit q, Lit r)   { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); add_tmp.push(r); return addClause_(add_tmp); }
 inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
-inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
+inline void     Solver::newDecisionLevel()                      { if (has_event) { msat_dpll_callback_notify_new_level(event); } trail_lim.push(trail.size()); }
 
 inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
 inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
diff --git a/minisat-2.2.0/mtl/template.mk b/minisat-2.2.0/mtl/template.mk
old mode 100644
new mode 100755
--- a/minisat-2.2.0/mtl/template.mk
+++ b/minisat-2.2.0/mtl/template.mk
@@ -5,6 +5,8 @@
 ##        "make d"  for a debug version (no optimizations).
 ##        "make"    for the standard version (optimized, but with debug information and assertions active)
 
+MATHSAT_INCLUDE = 
+
 PWD        = $(shell pwd)
 EXEC      ?= $(notdir $(PWD))
 
@@ -24,7 +26,7 @@
 
 COPTIMIZE ?= -O3
 
-CFLAGS    += -I$(MROOT) -D __STDC_LIMIT_MACROS -D __STDC_FORMAT_MACROS
+CFLAGS    += -I$(MROOT) -D __STDC_LIMIT_MACROS -D __STDC_FORMAT_MACROS -I$(MATHSAT_INCLUDE)
 LFLAGS    += -lz
 
 .PHONY : s p d r rs clean 
